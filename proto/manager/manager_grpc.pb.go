// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagerForClientClient is the client API for ManagerForClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerForClientClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type managerForClientClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerForClientClient(cc grpc.ClientConnInterface) ManagerForClientClient {
	return &managerForClientClient{cc}
}

func (c *managerForClientClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/ManagerForClient/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerForClientClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/ManagerForClient/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerForClientServer is the server API for ManagerForClient service.
// All implementations must embed UnimplementedManagerForClientServer
// for forward compatibility
type ManagerForClientServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	mustEmbedUnimplementedManagerForClientServer()
}

// UnimplementedManagerForClientServer must be embedded to have forward compatible implementations.
type UnimplementedManagerForClientServer struct {
}

func (UnimplementedManagerForClientServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedManagerForClientServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedManagerForClientServer) mustEmbedUnimplementedManagerForClientServer() {}

// UnsafeManagerForClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerForClientServer will
// result in compilation errors.
type UnsafeManagerForClientServer interface {
	mustEmbedUnimplementedManagerForClientServer()
}

func RegisterManagerForClientServer(s grpc.ServiceRegistrar, srv ManagerForClientServer) {
	s.RegisterService(&_ManagerForClient_serviceDesc, srv)
}

func _ManagerForClient_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerForClientServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerForClient/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerForClientServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerForClient_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerForClientServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerForClient/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerForClientServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerForClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerForClient",
	HandlerType: (*ManagerForClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _ManagerForClient_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ManagerForClient_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

// ManagerForWorkerClient is the client API for ManagerForWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerForWorkerClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type managerForWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerForWorkerClient(cc grpc.ClientConnInterface) ManagerForWorkerClient {
	return &managerForWorkerClient{cc}
}

func (c *managerForWorkerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/ManagerForWorker/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerForWorkerServer is the server API for ManagerForWorker service.
// All implementations must embed UnimplementedManagerForWorkerServer
// for forward compatibility
type ManagerForWorkerServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedManagerForWorkerServer()
}

// UnimplementedManagerForWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerForWorkerServer struct {
}

func (UnimplementedManagerForWorkerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedManagerForWorkerServer) mustEmbedUnimplementedManagerForWorkerServer() {}

// UnsafeManagerForWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerForWorkerServer will
// result in compilation errors.
type UnsafeManagerForWorkerServer interface {
	mustEmbedUnimplementedManagerForWorkerServer()
}

func RegisterManagerForWorkerServer(s grpc.ServiceRegistrar, srv ManagerForWorkerServer) {
	s.RegisterService(&_ManagerForWorker_serviceDesc, srv)
}

func _ManagerForWorker_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerForWorkerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerForWorker/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerForWorkerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerForWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerForWorker",
	HandlerType: (*ManagerForWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _ManagerForWorker_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
