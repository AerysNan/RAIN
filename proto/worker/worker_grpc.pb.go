// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkerForManagerClient is the client API for WorkerForManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerForManagerClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type workerForManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerForManagerClient(cc grpc.ClientConnInterface) WorkerForManagerClient {
	return &workerForManagerClient{cc}
}

func (c *workerForManagerClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/WorkerForManager/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerForManagerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/WorkerForManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerForManagerServer is the server API for WorkerForManager service.
// All implementations must embed UnimplementedWorkerForManagerServer
// for forward compatibility
type WorkerForManagerServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedWorkerForManagerServer()
}

// UnimplementedWorkerForManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerForManagerServer struct {
}

func (UnimplementedWorkerForManagerServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedWorkerForManagerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkerForManagerServer) mustEmbedUnimplementedWorkerForManagerServer() {}

// UnsafeWorkerForManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerForManagerServer will
// result in compilation errors.
type UnsafeWorkerForManagerServer interface {
	mustEmbedUnimplementedWorkerForManagerServer()
}

func RegisterWorkerForManagerServer(s grpc.ServiceRegistrar, srv WorkerForManagerServer) {
	s.RegisterService(&_WorkerForManager_serviceDesc, srv)
}

func _WorkerForManager_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerForManagerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerForManager/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerForManagerServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerForManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerForManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerForManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerForManagerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerForManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkerForManager",
	HandlerType: (*WorkerForManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _WorkerForManager_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkerForManager_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}
